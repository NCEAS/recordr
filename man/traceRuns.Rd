% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Recordr.R
\docType{methods}
\name{traceRuns}
\alias{traceRuns}
\alias{traceRuns,Recordr-method}
\title{Trace processing lineage by finding related executions}
\usage{
traceRuns(recordr, ...)

\S4method{traceRuns}{Recordr}(recordr, id = as.character(NA),
  file = as.character(NA), start = as.character(NA),
  end = as.character(NA), tag = as.character(NA),
  error = as.character(NA), seq = as.character(NA),
  orderBy = "-startTime", direction = "both", quiet = TRUE, ...)
}
\arguments{
\item{recordr}{a Recordr instance}

\item{...}{additional parameters}

\item{id}{The identifier for a run. Either \code{id} or \code{seq} can be specified, not both.}

\item{file}{The name of script to match}

\item{start}{Match runs that started in this time range (inclusive)
Times must be entered in the form 'YYYY-MM-DD HH:MM:SS' but can be shortened to not less that "YYYY"}

\item{end}{Match runs that ended in this time range (inclusive)
Times must be entered in the form 'YYYY-MM-DD HH:MM:SS' but can be shortened to not less that "YYYY"}

\item{tag}{The text of tag to match}

\item{error}{The text of error message to match.}

\item{seq}{The sequence number for a run.
#' @param id The execution identifier of a run to view}

\item{orderBy}{Sort the results according to the specified column. A hypen ('-') prepended to the column name 
denoes a descending sort. The default value is "-startTime"}

\item{direction}{The direction to trace the lineage, either \code{fowward}, \code{backward}, or \code{both}. 
The default is \code{both}}

\item{quiet}{A \code{logical} if TRUE then output is not printed.}
}
\value{
A list of the execution identifiers that are in the processing workflow.
}
\description{
A data processing workflow might include multiple processing steps, with
each step being performed by a separate R script. These multiple steps are linked by
the files that one step writes and the next step in the workflow reads. The \code{traceRuns}
method finds these connections between executions to determine the executions that
comprise a processing workflow, and returns information for each run in the processing workflow
including all files that were read and written by each script.
}
\details{
If the run \code{id} or \code{seq} number is know for the run to be traced, then one or the
other of these values can be used. Alternatively, other run attributes can be used to determine the run to be traced,
such as \code{file}, \code{start}, etc. If these other search parameters are used and multiple runs are selected,
only the first run selected will be traced. These search parameters can be used together to easily find certain runs, 
for example, the latest run of a particular script, the latest run with a specified tag specified, etc. (see examples).
}
\examples{
\dontrun{
# Trace lineage for the run with sequence number '101'
linkedRuns <- traceRuns(recordr, seq=101)
# Trace lineage for the last execution of script "runModel.R"
linkedRuns <- traceRuns(recordr, file="runModel.R", orderBy="-startTime")
# Trace lineage for the last execution with the tag 'best run yet!' specified.
linkedRuns <- traceRuns(recordr, tag="best run yet!", orderBy="-startTime")
}
}
\seealso{
\code{\link[=Recordr-class]{Recordr}} { class description}
}
